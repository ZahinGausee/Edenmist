generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model categories {
  category_id String     @id @default(uuid())
  name        String     @unique @db.VarChar(255)
  description String?    @db.Text
  created_at  DateTime   @default(now()) @db.DateTime(0)
  updated_at  DateTime   @default(now()) @db.DateTime(0)
  products    products[] @relation("CategoryProducts")
}

model order_items {
  item_id    String  @id @default(uuid())
  order_id   String
  product_id String
  quantity   Int
  price      Decimal @db.Decimal(10, 2)

  orders   orders   @relation(fields: [order_id], references: [order_id], onDelete: Cascade, onUpdate: NoAction, map: "order_items_ibfk_1")
  products products @relation(fields: [product_id], references: [product_id])

  @@index([order_id], map: "order_id")
  @@index([product_id], map: "product_id")
}

model orders {
  order_id    String        @id
  user_id     String        @db.Char(36)
  total_price Decimal       @db.Decimal(10, 2)
  status      orders_status
  created_at  DateTime?     @default(now()) @db.DateTime(0)
  updated_at  DateTime?     @default(now()) @db.DateTime(0)

  user        User          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  order_items order_items[]

  @@index([user_id], map: "user_id_idx")
}

model products {
  product_id  String   @id @default(uuid()) @db.VarChar(255)
  name        String   @unique @db.VarChar(255)
  description String?  @db.Text
  price       Decimal  @db.Decimal(10, 2)
  stock       Int      @default(0)
  category_id String?  @db.Char(36)
  created_at  DateTime @default(now()) @db.DateTime(0)
  updated_at  DateTime @default(now()) @db.DateTime(0)
  RRP         Decimal? @db.Decimal(10, 2)
  size        String?  @db.VarChar(10)
  main_image  String?

  categories  categories?   @relation("CategoryProducts", fields: [category_id], references: [category_id], onDelete: SetNull, onUpdate: NoAction)
  order_items order_items[]

  @@index([category_id], map: "category_id_idx")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         
  email         String?         @unique
  password      String?         @db.VarChar(255)
  mobile        String?         @db.VarChar(10)
  city          String?         @db.VarChar(100)
  pinCode       String?         @db.VarChar(6)
  state         String?         @db.VarChar(100)
  streetAddress String?         @db.VarChar(255)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  orders        orders[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum orders_status {
  pending
  completed
  cancelled
  shipped
  approved
}
